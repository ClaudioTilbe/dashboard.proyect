

@{
    ViewBag.Title = "Ventas en tiempo real";

}



<div class="row bg-agregado-Oscuro2">

    <div class="col-12 col-lg-6  border-agregado-Oscuro">

        <div class="p-1 d-flex justify-content-center">
            @* <p class="fw-bold pt-2 ps-2">Ventas por categoria</p> *@

        @*     <div class="p-2">
                <canvas id="myChart1"></canvas>
            </div> *@

            <div class="chart-container w-75 h-75">
                <canvas id="myChart1"></canvas>
            </div>


        </div>
    </div>

    <div class="col-12 col-lg-6 border-agregado-Oscuro">

        <div class="p-3">

            <h4 class="mb-3">Ingresa una venta</h4>

            <input type="button" id="agregarAlimento" value="Agregar alimento" class="btn btn-success d-block mb-2" onclick="accionarEvento(this.id)" />
            <input type="button" id="agregarRopa" value="Agregar ropa" class="btn btn-success d-block mb-2" onclick="accionarEvento(this.id)" />
            <input type="button" id="agregarJuguetes" value="Agregar juguete" class="btn btn-success d-block mb-2" onclick="accionarEvento(this.id)" />
            <input type="button" id="agregarElectronica" value="Agregar electronica" class="btn btn-success d-block mb-2" onclick="accionarEvento(this.id)" />

        </div>

    </div>

</div>


<div class="row bg-agregado-Oscuro2">

    <div class="col-12 border-agregado-Oscuro">

        <div class="p-3">

            <h4 class="mb-3">Ventas de label seleccionado</h4>

            <div id="infoVentas"></div>

        </div>

    </div>

</div>




<script>

    var myChartGeneral;
    var ctxGeneral = document.getElementById('myChart1').getContext('2d');

    // Ventas por categoria ======================================================================

    function generarGrafico(ventasXCategoria) {

        //var ctxGeneral = document.getElementById('myChart1').getContext('2d');

        myChartGeneral = new Chart(ctxGeneral, {
            type: 'doughnut',
            data: {
                labels: ventasXCategoria.map(x => x.categoria),
                datasets: [{
                    data: ventasXCategoria.map(x => x.totalVentas),

                    backgroundColor: [
                        'rgba(255, 159, 64, 1)', //Naranja
                        'rgba(75, 192, 192, 1)', //Verde agua
                        'rgba(54, 162, 235, 1)', //Azul
                        'rgba(255, 99, 132, 1)' //Rojo

                    ],
                    borderColor: 'rgba(255, 255, 255, 1)',
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                // animation: {
                //     duration: 0 // Desactiva la animación
                // },
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: 'white' // Cambia el color del texto de la leyenda a blanco
                        }
                    },
                    title: {
                        display: true,
                        text: 'Ventas por categoria',
                        color: 'white', // Cambia el color del texto del título a blanco
                        font: {
                            size: 20 // Cambia el tamaño del texto del título
                        }
                    }
                }
            }
        });
    }



    function formatVenta(venta) {

        // Formatear la fecha al formato deseado
        var fecha = new Date(venta.fecha);

        var dia = ('0' + fecha.getDate()).slice(-2);
        var mes = ('0' + (fecha.getMonth() + 1)).slice(-2);
        var año = fecha.getFullYear();
        var hora = ('0' + fecha.getHours()).slice(-2);
        var minutos = ('0' + fecha.getMinutes()).slice(-2);

        var fechaFormateada = dia + '-' + mes + '-' + año + ' - ' + hora + ':' + minutos;


        return $.extend(venta, {
            Fecha: fechaFormateada,
            Monto: venta.monto.toString(),
            Categoria: venta.categoriaProducto,
            Region: venta.region,
            Producto: venta.nombreProducto
        });
    }




    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/DashboardHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();


    connection.start()
        .then(inicioRT)
        .catch(function (err) {
            return console.error(err.toString());
        });




    function inicioRT() {

        connection.invoke("inicioRT").then(function () {
        }).catch(function (error) {
            console.error("(inicioRT) Error al llamar al método del servidor: " + error);
        });
    }



    connection.on('cargoGrafico', function (ventasXCategoria) {

        // Llama a la función para generar el gráfico con los datos recibidos
        generarGrafico(ventasXCategoria);
    });



    connection.on('agregoVentas', function (ventasXCategoria) {

        // Llama a la función para generar el gráfico con los datos recibidos
        ventasXCategoria.forEach(item => {
            
            addData(myChartGeneral, item.categoria, item.totalVentas)
        });
    });



    connection.on('EnvioVentasXLabel', function (ventasXLabel) {


        // Limpiar el contenido anterior del contenedor infoVentas
        var infoVentasContainer = document.getElementById('infoVentas');
        infoVentasContainer.innerHTML = '';

        // Llama a la función para generar el gráfico con los datos recibidos
        ventasXLabel.forEach(item => {

            //debugger;

            var venta = formatVenta(item)

            var ventaInfo = document.createElement('p');
            ventaInfo.classList.add('mb-1');

            ventaInfo.innerText = `Fecha: ${venta.Fecha}, Monto: ${venta.Monto}, Categoria: ${venta.Categoria}, Region: ${venta.Region}, Producto: ${venta.Producto}`;
            infoVentasContainer.appendChild(ventaInfo);
            
            
            //================================================
        });
    });



    function accionarEvento(buttonId) {

        connection.invoke("AgregarVentas", buttonId);
    }



    function addData(myChartGeneral, label, newData) {

        // Buscar el índice del label en los datos existentes
        const index = myChartGeneral.data.labels.indexOf(label);

        const dataset = myChartGeneral.data.datasets[0];

        if (index === -1) 
        {
            // Si el label no existe, agregarlo como nueva etiqueta y dato
            myChartGeneral.data.labels.push(label);
            dataset.data.push(newData);
        } 
        else 
        {
            // Si el label existe, actualizar el dato correspondiente
            dataset.data[index] += newData; // Sumar el nuevo dato al dato existente
        }

        // Actualizar el gráfico
        myChartGeneral.update();
    }




    // Agregar el evento onclick al canvas
    document.getElementById('myChart1').onclick = function (evt) {
        var points = myChartGeneral.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

        if (points.length) {
            var firstPoint = points[0];
            var label = myChartGeneral.data.labels[firstPoint.index];

            connection.invoke("ObtengoVentasXLabel", label);
        }
    };



    

 


</script>